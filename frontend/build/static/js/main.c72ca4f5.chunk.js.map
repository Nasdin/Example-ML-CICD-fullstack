{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","value","target","name","formData","state","setState","handlePredictClick","isLoading","fetch","headers","Accept","Content-Type","method","body","JSON","stringify","then","response","json","result","handleCancelClick","capShape","capSurface","capColour","bruises","odour","gillAttachment","gillSpacing","gillSize","gillColour","stalkShape","stalkRoot","stalkSurfaceAboveRing","stalkSurfaceBelowRing","stalkColourAboveRing","stalkColourBelowRing","veilType","veilColour","ringNumber","ringType","sporePrintColour","population","habitat","pastPredictions","id","dateTime","features","prediction","map","history","index","react_default","a","createElement","key","slice","keys","toUpperCase","Container","className","Form","Row","Group","as","Col","Label","Control","onChange","Button","block","variant","disabled","onClick","renderTableHeader","renderTableData","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gTAgjBeA,qBAriBX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAyFVQ,aAAe,SAACC,GACZ,IAAMC,EAAQD,EAAME,OAAOD,MACrBE,EAAOH,EAAME,OAAOC,KACtBC,EAAWZ,EAAKa,MAAMD,SAC1BA,EAASD,GAAQF,EACjBT,EAAKc,SAAS,CACVF,cAhGWZ,EA6HnBe,mBAAqB,SAACP,GAClB,IAAMI,EAAWZ,EAAKa,MAAMD,SAC5BZ,EAAKc,SAAS,CAACE,WAAW,IAC1BC,MAAM,oCACF,CACIC,QAAS,CACLC,OAAU,mBACVC,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUZ,KAExBa,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACF1B,EAAKc,SAAS,CACVc,OAAQF,EAASE,OACjBZ,WAAW,OA7IRhB,EAmJnB6B,kBAAoB,SAACrB,GACjBR,EAAKc,SAAS,CAACc,OAAQ,oCAlJvB5B,EAAKa,MAAQ,CACTG,WAAW,EACXY,OAAQ,6BACRhB,SAAU,CACNkB,SAAU,GACVC,WAAY,GACZC,UAAW,GACXC,QAAS,GACTC,MAAO,GACPC,eAAgB,GAChBC,YAAa,GACbC,SAAU,GACVC,WAAY,GACZC,WAAY,GACZC,UAAW,GACXC,sBAAuB,GACvBC,sBAAuB,GACvBC,qBAAsB,GACtBC,qBAAsB,GACtBC,SAAU,GACVC,WAAY,GACZC,WAAY,GACZC,SAAU,GACVC,iBAAkB,GAClBC,WAAY,GACZC,QAAS,IAEbC,gBAAiB,CACb,CACIC,GAAI,EACJC,SAAU,sBACVC,SAAU,CACNzB,SAAU,GACVC,WAAY,GACZC,UAAW,GACXC,QAAS,GACTC,MAAO,GACPC,eAAgB,GAChBC,YAAa,GACbC,SAAU,GACVC,WAAY,GACZC,WAAY,GACZC,UAAW,GACXC,sBAAuB,GACvBC,sBAAuB,GACvBC,qBAAsB,GACtBC,qBAAsB,GACtBC,SAAU,GACVC,WAAY,GACZC,WAAY,GACZC,SAAU,GACVC,iBAAkB,GAClBC,WAAY,GACZC,QAAS,IACVK,WAAY,aAEnB,CACIH,GAAI,EACJC,SAAU,sBACVC,SAAU,CACNzB,SAAU,GACVC,WAAY,GACZC,UAAW,GACXC,QAAS,GACTC,MAAO,GACPC,eAAgB,GAChBC,YAAa,GACbC,SAAU,GACVC,WAAY,GACZC,WAAY,GACZC,UAAW,GACXC,sBAAuB,GACvBC,sBAAuB,GACvBC,qBAAsB,GACtBC,qBAAsB,GACtBC,SAAU,GACVC,WAAY,GACZC,WAAY,GACZC,SAAU,GACVC,iBAAkB,GAClBC,WAAY,GACZC,QAAS,IACVK,WAAY,mBApFZxD,iFAqGf,OAAOG,KAAKU,MAAMuC,gBAAgBK,IAAI,SAACC,EAASC,GAAU,IAC/CN,EAAsCK,EAAtCL,GAAIC,EAAkCI,EAAlCJ,SAAUC,EAAwBG,EAAxBH,SAAUC,EAAcE,EAAdF,WAC/B,OACII,EAAAC,EAAAC,cAAA,MAAIC,IAAKV,GACLO,EAAAC,EAAAC,cAAA,UAAKT,GACLO,EAAAC,EAAAC,cAAA,UAAKR,GACLM,EAAAC,EAAAC,cAAA,UACMF,EAAAC,EAAAC,cAAA,WAAMvC,KAAKC,UAAU+B,EAAU,KAAM,GAAGS,MAAM,GAAG,KAGvDJ,EAAAC,EAAAC,cAAA,UAAKN,kDAQjB,OADavD,OAAOgE,KAAK9D,KAAKU,MAAMuC,gBAAgB,IACtCK,IAAI,SAACM,EAAKJ,GACpB,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,GAAQI,EAAIG,kDAgChC,IAAMlD,EAAYb,KAAKU,MAAMG,UACvBJ,EAAWT,KAAKU,MAAMD,SACtBgB,EAASzB,KAAKU,MAAMe,OAE1B,OACIgC,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIM,UAAU,SAAd,2BAEJR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WACXR,EAAAC,EAAAC,cAAA,MAAIM,UAAU,YAAd,0BACAR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACIT,EAAAC,EAAAC,cAACO,EAAA,EAAKC,IAAN,KACIV,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,kBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASkB,SAChBnB,KAAK,WACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,0BAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,oBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASmB,WAChBpB,KAAK,aACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,mBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASoB,UAChBrB,KAAK,YACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAIRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,gBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASqB,QAChBtB,KAAK,UACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBAIZF,EAAAC,EAAAC,cAACO,EAAA,EAAKC,IAAN,KACIV,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,cACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASsB,MAChBvB,KAAK,QACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,yBAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,wBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASuB,eAChBxB,KAAK,iBACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,2BAKRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,qBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASwB,YAChBzB,KAAK,cACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,2BAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,kBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASyB,SAChB1B,KAAK,WACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,2BAIZF,EAAAC,EAAAC,cAACO,EAAA,EAAKC,IAAN,KACIV,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,mBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAAS0B,WAChB3B,KAAK,aACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAIRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,oBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAAS2B,WAChB5B,KAAK,aACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,4BAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,mBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAAS4B,UAChB7B,KAAK,YACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,2BAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,iCACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAAS6B,sBAChB9B,KAAK,wBACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,2BAIZF,EAAAC,EAAAC,cAACO,EAAA,EAAKC,IAAN,KACIV,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,iCACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAAS8B,sBAChB/B,KAAK,WACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAIRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,gCACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAAS+B,qBAChBhC,KAAK,uBACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,gCACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASgC,qBAChBjC,KAAK,uBACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,kBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASiC,SAChBlC,KAAK,WACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,8BAIZF,EAAAC,EAAAC,cAACO,EAAA,EAAKC,IAAN,KACIV,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,oBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASkC,WAChBnC,KAAK,aACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,oBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASmC,WAChBpC,KAAK,aACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,uBAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,kBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASoC,SAChBrC,KAAK,WACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,wBAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,2BACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASqC,iBAChBtC,KAAK,mBACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,2BAIZF,EAAAC,EAAAC,cAACO,EAAA,EAAKC,IAAN,KACIV,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,mBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASsC,WAChBvC,KAAK,aACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,4BAGRF,EAAAC,EAAAC,cAACO,EAAA,EAAKE,MAAN,CAAYC,GAAIC,KACZb,EAAAC,EAAAC,cAACO,EAAA,EAAKK,MAAN,gBACAd,EAAAC,EAAAC,cAACO,EAAA,EAAKM,QAAN,CACIH,GAAG,SACH/D,MAAOG,EAASuC,QAChBxC,KAAK,UACLiE,SAAUzE,KAAKI,cACfqD,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,0BAIZF,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACIb,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACIC,OAAK,EACLC,QAAQ,UACRC,SAAUhE,EACViE,QAAUjE,EAAsC,KAA1Bb,KAAKY,oBAC1BC,EAAY,oBAAsB,YAG3C4C,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACIb,EAAAC,EAAAC,cAACe,EAAA,EAAD,CACIC,OAAK,EACLC,QAAQ,SACRC,SAAUhE,EACViE,QAAS9E,KAAK0B,mBAJlB,kBAUA,KAAXD,EAAgB,KACZgC,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACGV,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAKL,UAAU,oBACXR,EAAAC,EAAAC,cAAA,MAAIT,GAAG,UAAUzB,MAKjCgC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,WACXR,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SAAOT,GAAG,yBACNO,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UAAK3D,KAAK+E,qBACT/E,KAAKgF,6BA7hBZC,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxE,KAAK,SAAAyE,GACjCA,EAAaC","file":"static/js/main.c72ca4f5.chunk.js","sourcesContent":["import React, {Component,} from 'react';\nimport './App.css';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            result: \"Click predict to find out!\",\n            formData: {\n                capShape: '',\n                capSurface: '',\n                capColour: '',\n                bruises: '',\n                odour: '',\n                gillAttachment: '',\n                gillSpacing: '',\n                gillSize: '',\n                gillColour: '',\n                stalkShape: '',\n                stalkRoot: '',\n                stalkSurfaceAboveRing: '',\n                stalkSurfaceBelowRing: '',\n                stalkColourAboveRing: '',\n                stalkColourBelowRing: '',\n                veilType: '',\n                veilColour: '',\n                ringNumber: '',\n                ringType: '',\n                sporePrintColour: '',\n                population: '',\n                habitat: ''\n            },\n            pastPredictions: [\n                {\n                    id: 1,\n                    dateTime: '12 Apr 2020 11.06PM',\n                    features: {\n                        capShape: '',\n                        capSurface: '',\n                        capColour: '',\n                        bruises: '',\n                        odour: '',\n                        gillAttachment: '',\n                        gillSpacing: '',\n                        gillSize: '',\n                        gillColour: '',\n                        stalkShape: '',\n                        stalkRoot: '',\n                        stalkSurfaceAboveRing: '',\n                        stalkSurfaceBelowRing: '',\n                        stalkColourAboveRing: '',\n                        stalkColourBelowRing: '',\n                        veilType: '',\n                        veilColour: '',\n                        ringNumber: '',\n                        ringType: '',\n                        sporePrintColour: '',\n                        population: '',\n                        habitat: ''\n                    }, prediction: 'Poisonous'\n                },\n                {\n                    id: 2,\n                    dateTime: '12 Apr 2020 11.06PM',\n                    features: {\n                        capShape: '',\n                        capSurface: '',\n                        capColour: '',\n                        bruises: '',\n                        odour: '',\n                        gillAttachment: '',\n                        gillSpacing: '',\n                        gillSize: '',\n                        gillColour: '',\n                        stalkShape: '',\n                        stalkRoot: '',\n                        stalkSurfaceAboveRing: '',\n                        stalkSurfaceBelowRing: '',\n                        stalkColourAboveRing: '',\n                        stalkColourBelowRing: '',\n                        veilType: '',\n                        veilColour: '',\n                        ringNumber: '',\n                        ringType: '',\n                        sporePrintColour: '',\n                        population: '',\n                        habitat: ''\n                    }, prediction: 'Not Poisonous'\n                }\n            ]\n        }\n    }\n\n    handleChange = (event) => {\n        const value = event.target.value;\n        const name = event.target.name;\n        let formData = this.state.formData;\n        formData[name] = value;\n        this.setState({\n            formData\n        });\n    }\n\n    renderTableData() {\n        return this.state.pastPredictions.map((history, index) => {\n            const {id, dateTime, features, prediction} = history\n            return (\n                <tr key={id}>\n                    <td>{id}</td>\n                    <td>{dateTime}</td>\n                    <td>\n                          <pre>{JSON.stringify(features, null, 2).slice(1,-1) }</pre>\n\n                    </td>\n                    <td>{prediction}</td>\n                </tr>\n            )\n        })\n    }\n\n    renderTableHeader() {\n        let header = Object.keys(this.state.pastPredictions[0])\n        return header.map((key, index) => {\n            return <th key={index}>{key.toUpperCase()}</th>\n        })\n\n    }\n\n    handlePredictClick = (event) => {\n        const formData = this.state.formData;\n        this.setState({isLoading: true});\n        fetch('http://127.0.0.1:5000/prediction/',\n            {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                method: 'POST',\n                body: JSON.stringify(formData)\n            })\n            .then(response => response.json())\n            .then(response => {\n                this.setState({\n                    result: response.result,\n                    isLoading: false\n                });\n            });\n    }\n\n\n    handleCancelClick = (event) => {\n        this.setState({result: \"Lets predict another mushroom!\"});\n    }\n\n    render() {\n        const isLoading = this.state.isLoading;\n        const formData = this.state.formData;\n        const result = this.state.result;\n\n        return (\n            <Container>\n                <div>\n                    <h1 className=\"title\">Can eat this mushroom?</h1>\n                </div>\n                <div className=\"content\">\n                    <h2 className=\"subtitle\">Describe your mushroom</h2>\n                    <Form>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>Cap Shape</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.capShape}\n                                    name=\"capShape\"\n                                    onChange={this.handleChange}>\n                                    <option>Bell</option>\n                                    <option>Conical</option>\n                                    <option>Convex</option>\n                                    <option>Flat</option>\n                                    <option>Knobbed</option>\n                                    <option>Sunken</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Cap Surface</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.capSurface}\n                                    name=\"capSurface\"\n                                    onChange={this.handleChange}>\n                                    <option>Fibrous</option>\n                                    <option>Grooves</option>\n                                    <option>Scaly</option>\n                                    <option>Smooth</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Cap Colour</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.capColour}\n                                    name=\"capColour\"\n                                    onChange={this.handleChange}>\n                                    <option>Brown</option>\n                                    <option>Buff</option>\n                                    <option>Cinnamon</option>\n                                    <option>Gray</option>\n                                    <option>Green</option>\n                                    <option>Pink</option>\n                                    <option>Purple</option>\n                                    <option>Red</option>\n                                    <option>White</option>\n                                    <option>Yellow</option>\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group as={Col}>\n                                <Form.Label>Bruises</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.bruises}\n                                    name=\"bruises\"\n                                    onChange={this.handleChange}>\n                                    <option>Yes</option>\n                                    <option>No</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>Odour</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.odour}\n                                    name=\"odour\"\n                                    onChange={this.handleChange}>\n                                    <option>Almond</option>\n                                    <option>Anise</option>\n                                    <option>Creosote</option>\n                                    <option>Fishy</option>\n                                    <option>Foul</option>\n                                    <option>Musty</option>\n                                    <option>None</option>\n                                    <option>Pungent</option>\n                                    <option>Spicy</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Gill Attachment</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.gillAttachment}\n                                    name=\"gillAttachment\"\n                                    onChange={this.handleChange}>\n                                    <option>Attached</option>\n                                    <option>Descending</option>\n                                    <option>Free</option>\n                                    <option>Notched</option>\n                                </Form.Control>\n                            </Form.Group>\n\n\n                            <Form.Group as={Col}>\n                                <Form.Label>Gill Spacing</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.gillSpacing}\n                                    name=\"gillSpacing\"\n                                    onChange={this.handleChange}>\n                                    <option>Close</option>\n                                    <option>Crowded</option>\n                                    <option>Distant</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Gill Size</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.gillSize}\n                                    name=\"gillSize\"\n                                    onChange={this.handleChange}>\n                                    <option>Broad</option>\n                                    <option>Narrow</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>gillColour</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.gillColour}\n                                    name=\"gillColour\"\n                                    onChange={this.handleChange}>\n                                    <option>Black</option>\n                                    <option>Brown</option>\n                                    <option>Buff</option>\n                                    <option>Chocolate</option>\n                                    <option>Gray</option>\n                                    <option>Green</option>\n                                    <option>Orange</option>\n                                    <option>Pink</option>\n                                    <option>Purple</option>\n                                    <option>Red</option>\n                                    <option>White</option>\n                                    <option>Yellow</option>\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group as={Col}>\n                                <Form.Label>Stalk Shape</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.stalkShape}\n                                    name=\"stalkShape\"\n                                    onChange={this.handleChange}>\n                                    <option>Enlarging</option>\n                                    <option>Tapering</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Stalk Root</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.stalkRoot}\n                                    name=\"stalkRoot\"\n                                    onChange={this.handleChange}>\n                                    <option>Bulbous</option>\n                                    <option>Club</option>\n                                    <option>Cup</option>\n                                    <option>Equal</option>\n                                    <option>Rhizomorphs</option>\n                                    <option>Rooted</option>\n                                    <option>Missing</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Stalk Surface Above Ring</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.stalkSurfaceAboveRing}\n                                    name=\"stalkSurfaceAboveRing\"\n                                    onChange={this.handleChange}>\n                                    <option>Fibrous</option>\n                                    <option>Scaly</option>\n                                    <option>Silky</option>\n                                    <option>Smooth</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>Stalk Surface Below Ring</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.stalkSurfaceBelowRing}\n                                    name=\"select13\"\n                                    onChange={this.handleChange}>\n                                    <option>Fibrous</option>\n                                    <option>Scaly</option>\n                                    <option>Silky</option>\n                                    <option>Smooth</option>\n                                </Form.Control>\n                            </Form.Group>\n\n                            <Form.Group as={Col}>\n                                <Form.Label>Stalk Colour Above Ring</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.stalkColourAboveRing}\n                                    name=\"stalkColourAboveRing\"\n                                    onChange={this.handleChange}>\n                                    <option>Brown</option>\n                                    <option>Buff</option>\n                                    <option>Cinnamon</option>\n                                    <option>Gray</option>\n                                    <option>Orange</option>\n                                    <option>Pink</option>\n                                    <option>Red</option>\n                                    <option>White</option>\n                                    <option>Yellow</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Stalk Colour Below Ring</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.stalkColourBelowRing}\n                                    name=\"stalkColourBelowRing\"\n                                    onChange={this.handleChange}>\n                                    <option>Brown</option>\n                                    <option>Buff</option>\n                                    <option>Cinnamon</option>\n                                    <option>Gray</option>\n                                    <option>Orange</option>\n                                    <option>Pink</option>\n                                    <option>Red</option>\n                                    <option>White</option>\n                                    <option>Yellow</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Veil Type</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.veilType}\n                                    name=\"veilType\"\n                                    onChange={this.handleChange}>\n                                    <option>Partial</option>\n                                    <option>Universal</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>Veil Colour</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.veilColour}\n                                    name=\"veilColour\"\n                                    onChange={this.handleChange}>\n                                    <option>Brown</option>\n                                    <option>Orange</option>\n                                    <option>White</option>\n                                    <option>Yellow</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Ring Number</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.ringNumber}\n                                    name=\"ringNumber\"\n                                    onChange={this.handleChange}>\n                                    <option>None</option>\n                                    <option>One</option>\n                                    <option>Two</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Ring Type</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.ringType}\n                                    name=\"ringType\"\n                                    onChange={this.handleChange}>\n                                    <option>Cobwebby</option>\n                                    <option>Evanescent</option>\n                                    <option>Flaring</option>\n                                    <option>Large</option>\n                                    <option>None</option>\n                                    <option>Pendant</option>\n                                    <option>Sheathing</option>\n                                    <option>Zone</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Spore Print Colour</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.sporePrintColour}\n                                    name=\"sporePrintColour\"\n                                    onChange={this.handleChange}>\n                                    <option>Black</option>\n                                    <option>Brown</option>\n                                    <option>Buff</option>\n                                    <option>Chocolate</option>\n                                    <option>Green</option>\n                                    <option>Orange</option>\n                                    <option>Purple</option>\n                                    <option>White</option>\n                                    <option>Yellow</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Form.Row>\n                        <Form.Row>\n                            <Form.Group as={Col}>\n                                <Form.Label>Population</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.population}\n                                    name=\"population\"\n                                    onChange={this.handleChange}>\n                                    <option>Abundant</option>\n                                    <option>Clustered</option>\n                                    <option>Numerous</option>\n                                    <option>Scattered</option>\n                                    <option>Several</option>\n                                    <option>Solitary</option>\n                                </Form.Control>\n                            </Form.Group>\n                            <Form.Group as={Col}>\n                                <Form.Label>Habitat</Form.Label>\n                                <Form.Control\n                                    as=\"select\"\n                                    value={formData.habitat}\n                                    name=\"habitat\"\n                                    onChange={this.handleChange}>\n                                    <option>Grasses</option>\n                                    <option>Leaves</option>\n                                    <option>Meadows</option>\n                                    <option>Paths</option>\n                                    <option>Urban</option>\n                                    <option>Waste</option>\n                                    <option>Woods</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Form.Row>\n                        <Row>\n                            <Col>\n                                <Button\n                                    block\n                                    variant=\"success\"\n                                    disabled={isLoading}\n                                    onClick={!isLoading ? this.handlePredictClick : null}>\n                                    {isLoading ? 'Making prediction' : 'Predict'}\n                                </Button>\n                            </Col>\n                            <Col>\n                                <Button\n                                    block\n                                    variant=\"danger\"\n                                    disabled={isLoading}\n                                    onClick={this.handleCancelClick}>\n                                    Try Another\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Form>\n                    {result === \"\" ? null :\n                        (<Row>\n                            <Col className=\"result-container\">\n                                <h5 id=\"result\">{result}</h5>\n                            </Col>\n                        </Row>)\n                    }\n                </div>\n                <div className=\"history\">\n                    <h2> Past predictions</h2>\n                    <table id='historicalPredictions'>\n                        <tbody>\n                        <tr>{this.renderTableHeader()}</tr>\n                        {this.renderTableData()}\n                        </tbody>\n\n                    </table>\n                </div>\n            </Container>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}